package indicators

import (
	"testing"
	"fmt"
)

var ACC = 1e-2


var TestBars = BarHistory{
	Open: []float64{
		126.51423645019500, 128.61257934570300, 129.03817749023400, 128.47401428222700, 
		129.37472534179700, 128.96890258789100, 130.78021240234400, 132.40345764160200, 
		133.07650756835900, 132.0966339111330,  132.04713439941400, 133.4229278564450,  
		134.7789306640630,  135.2045440673830,  136.4912567138670,  138.63909912109400, 
		142.06869506835900, 140.1336669921880,  141.29171752929700, 144.7163848876950,  
		142.5586395263670,  146.58706665039100, 147.71542358398400, 146.94338989257800, 
		142.281494140625,   141.99447631835900, 144.04331970214800, 144.44418334960900, 
		146.0426788330080,  146.7553253173830,  147.5966339111330,  143.33067321777300,
	},
	High: []float64{
		129.20643615722700, 129.26583862304700, 129.55287170410200, 131.1959228515630,  
		130.16653442382800, 131.05735778808600, 132.7102813720700,  132.94784545898400, 
		133.2645721435550,  132.52223205566400, 133.86338806152300, 135.09567260742200, 
		136.0062713623050,  135.92709350585900, 138.56980895996100, 141.6876220703130,  
		143.40985107421900, 142.5883331298830,  144.16207885742200, 144.82525634765600, 
		145.95361328125,    148.04205322265600, 148.4676513671880,  148.2301025390630,  
		142.59823608398400, 145.59698486328100, 144.63719177246100, 146.6811065673830,  
		147.19845581054700, 148.2993927001950,  147.68572998046900, 145.46861267089800,
	},
	Low: []float64{
		125.77189636230500, 128.0681915283200,  127.14868927002000, 128.32553100585900, 
		128.90951538085900, 127.89004516601600, 130.27540588378900, 131.8689727783200,  
		131.572021484375,   131.45326232910200, 131.9877471923830,  132.9775390625,     
		134.48199462890600, 134.3731231689450,  136.3378448486330,  138.63909912109400, 
		141.20263671875,    139.22801208496100, 141.19491577148400, 142.52894592285200, 
		142.16273498535200, 146.1713409423830,  145.58737182617200, 144.38973999023400, 
		140.22274780273400, 141.49957275390600, 143.1525115966800,  144.32044982910200, 
		145.4191131591800,  146.19114685058600, 144.0631103515630,  141.0838623046880,  
	},
	Close: []float64{
		129.14706420898400, 128.31564331054700, 128.8204345703130,  130.4436798095700,  
		129.1272735595700,  130.94847106933600, 132.61129760742200, 132.33416748046900, 
		132.04713439941400, 131.7501983642580,  133.40313720703100, 134.9373016357420,  
		135.5608673095700,  135.86770629882800, 138.5302276611330,  140.56918334960900, 
		143.0931396484380,  141.77671813964800, 143.6276092529300,  143.02383422851600, 
		144.15219116210900, 147.62632751464800, 146.9631805419920,  144.89453125,       
		140.99478149414100, 144.656982421875,   143.91464233398400, 145.30035400390600, 
		147.0423583984380,  147.4679718017580,  145.27066040039100, 143.49893188476600, 
	},
	Volume: []int64{
		97906664, 63393940, 92762656, 97719944, 110077824, 80485520, 75555464, 
		60835676, 69420168, 71514312, 62752360, 65222368, 63914316, 53027488, 
		79760368, 109298344, 105994392, 106665112, 100921784, 77087216, 
		101867744, 128362088, 107922800, 94213880, 122687904, 97344472, 
		75767472, 78136376, 72184832, 73181688, 105900416, 120158688,
	},
}


// Moving average
func TestSma(t *testing.T) {
	period := 5
	// want := []float64{0, 0, 0, 0, 130.504, 130.868, 131.736, 132.446, 132.77, 133.3, 133.796, 134.266, 134.918, 135.69, 137.06, 138.508, 140.156, 141.412, 142.98, 143.888, 144.612, 145.528, 146.576, 146.832, 146.422, 146.524, 145.774, 145.438, 145.872, 147.18, 147.304, 147.22}

	want := []float64{0.0,0.0,0.0,0.0,129.1708190917970,129.53110046386700,130.39023132324200,131.09297790527300,131.41366882324200,131.9382537841800,132.42918701171900,132.8943878173830,133.53972778320300,134.30384216308600,135.65984802246100,137.09305725097700,138.72422485351600,139.96739501953100,141.51937561035200,142.41809692382800,143.13469848632800,144.0413360595700,145.07862854003900,145.33201293945300,144.92620239257800,145.02716064453100,144.28482360839800,143.95225830078100,144.38182373046900,145.67646179199200,145.7991973876950,145.71605529785200}

	got, err := MA(TestBars.Close, period, SMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEma(t *testing.T) {
	period := 5
	// want := []float64{130.48,130.2,130.1833,130.7188,130.6325,131.1883,132.1189,132.6459,132.9006,132.9704,133.5736,134.4924,135.3149,135.9666,137.2977,138.8718,140.7712,141.5941,142.7660,143.3440,144.1093,145.7895,146.6863,146.5875,145.2083,145.5222,145.4815,145.9210,146.8006,147.5304,147.2769,146.5113}
	want := []float64{129.14706420898400,128.86992390950500,128.85342746310800,129.3835115785950,129.2980989055870,129.84822296017000,130.76924784258700,131.2908877218810,131.54296994772500,131.61204608657000,132.2090764600570,133.11848485195200,133.93261233782500,134.5776436581590,135.8951716591500,137.45317555597000,139.33316358679300,140.14768177107800,141.3076575983620,141.87971647508000,142.63720803742300,144.30024786316500,145.18789208944100,145.09010514296000,143.72499726002000,144.03565898063900,143.99532009842100,144.43033140024900,145.3010070663120,146.02332864479400,145.77243922999300,145.0146034482500}



	got, err := MA(TestBars.Close, period, EMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestComputeLwmaWeights1(t *testing.T) {
	period := 1
	want := []float64{1.0}
	got := computeLwmaWeights(period)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}
func TestComputeLwmaWeights5(t *testing.T) {
	period := 5
	want := []float64{5.0/15.0, 
		              4.0/15.0,
					  3.0/15.0,
					  2.0/15.0,
					  1.0/15.0}
	got := computeLwmaWeights(period)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}


func TestLwma(t *testing.T) {
	period := 5
	// want := []float64{0.0,0.0,0.0,0.0,130.6446,131.2433,132.2806,132.9353,133.2566,133.3700,133.8633,134.708 ,135.6060,136.3900,137.8133,139.4666,141.4873,142.5153,143.7480,144.2546,144.8386,146.3513,147.3353,147.2733,145.8126,145.722 ,145.3473,145.6893,146.73,147.7693,147.6326,146.8580}

	want := []float64{0.0,0.0,0.0,0.0,129.31004943847700,129.90260009765600,130.92933247884100,131.57731119791700,131.8953633626300,132.0075398763020,132.49583435058600,133.33187255859400,134.22069905599000,134.99669189453100,136.40548706054700,138.04193216959600,140.04195963541700,141.05945739746100,142.27952880859400,142.7810150146480,143.35904642740900,144.85625610351600,145.8302042643230,145.76883850097700,144.3230946858720,144.233354695638,143.86251525878900,144.201025390625,145.2310587565100,146.25977478027300,146.12450764974000,145.35775248209600}


	got, err := MA(TestBars.Close, period, LWMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWilderMA(t *testing.T) {
	period := 5
	// want := []float64{0.0,0.0,0.0,0.0,130.504 ,130.8632,131.4865,131.9292,132.2253,132.4023,132.8778,133.5682,134.2466,134.8513,135.8730,137.1024,138.5959,139.5247,140.6418,141.4134,142.2587,143.6370,144.6056,144.9624,144.4599,144.7979,144.9183,145.2947,145.9477,146.5562,146.5989,146.2751}
	want := []float64{0.0,0.0,0.0,0.0,129.1708190917970,129.52634948730500,130.14333911132800,130.58150478515600,130.87463070800800,131.04974423925800,131.5204228328130,132.20379859339800,132.8752123366330,133.4737111290720,134.48501443548400,135.70184821830900,137.1801065043350,138.09942883139800,139.20506491570400,139.9688187782660,140.80549325503500,142.16966010695800,143.12836419396500,143.48159760517200,142.98423438296500,143.31878399074700,143.43795565939500,143.81043532829700,144.45681994232500,145.05905031421200,145.10137233144700,144.78088424211100}


	got, err := MA(TestBars.Close, period, WILDER)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

//RSI
func TestRSI(t *testing.T) {
    period := 5

	want := []float64{0.0,0.0,0.0,0.0,0.0,67.78115545017400,75.57844200494920,71.95086723077780,67.74136625223780,62.97687377547850,75.14230376246180,82.00313082238280,84.216434549137,85.32642287480910,91.67594306166710,94.11402390768810,95.9496658449414,79.73705928329040,84.37664820463020,77.1715707202275,80.96805008125100,88.39552173112490,80.86553635442170,60.70244408751380,38.236271644787700,56.94252794984710,52.8841745284969,59.602321535495700,66.99704462357330,68.74435492312840,51.23800087313730,40.772853432675}

    got := RSI(TestBars.Close, period)

	for i := 0; i < len(got); i++ {
		fmt.Println(i, got[i], want[i])
	}

	// Reference data was computed using WealthLab
	_, err := sliceAlmostEqual(got, want,1)
	if err != nil {
		t.Fatal(err)
	}
}

// ROC
func TestROC(t *testing.T) {
	period := 5
	// want := []float64{0.0,0.0,0.0,0.0,0.0,1.395,3.348,2.728,1.229,2.031,1.8745,1.7539,2.4,2.893,5.146,5.372,6.04,4.59,5.711,3.244,2.549,3.1680,3.658,0.882,-1.419,0.350 ,-2.514,-1.131,1.482 ,4.591 ,0.424 ,-0.288}
	want := []float64{0.0,0.0,0.0,0.0,0.0,1.394849252969890,3.3477245533334900,2.727620755104950,1.229231337374540,2.0312709564625600,1.874528291663370,1.7540014088438800,2.4382968439181000,2.893339500922180,5.146124545581220,5.371722354217950,6.0441685981772900,4.5852840524274800,5.7113667150856300,3.2437733217149500,2.548928383249330,3.167998044733950,3.658190477533240,0.8820880634720110,-1.4186815402620900,0.3501793872823950,-2.5142433894765600,-1.1314579148011900,1.4823383118108600,4.591085030963500,0.4242297663350310,-0.2888590364933210}


    got := ROC(TestBars.Close, period)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

// True Range
func TestTR(t *testing.T) {
	// want := []float64{3.4200, 1.2100, 2.4290, 2.9000, 1.5500, 3.2000, 2.4600, 1.0900, 1.7100, 1.1000, 2.1300, 2.1400, 1.5400, 1.5700, 2.7300, 3.1900, 2.8700, 3.9050, 2.9978, 2.3200, 3.8300, 3.9300, 2.9100, 3.8800, 4.7200, 4.6497, 1.5200, 2.7950, 1.9177, 2.1300, 3.6600, 4.4300}

	want := []float64{
		3.434539794921880, 1.1976470947265600, 2.4041824340820300, 2.870391845703130, 
		1.5341644287109400, 3.1673126220703100, 2.43487548828125, 1.0788726806640600, 
		1.6925506591796900, 1.0689697265625, 2.113189697265630, 2.118133544921880, 
		1.5242767333984400, 1.5539703369140600, 2.7021026611328100, 3.1573944091796900, 
		2.840667724609380, 3.8651275634765600, 2.9671630859375, 2.2963104248046900, 
		3.7908782958984400, 3.889862060546880, 2.880279541015630, 3.840362548828130, 
		4.671783447265630, 4.602203369140630, 1.5044708251953100, 2.7664642333984400, 
		1.898101806640630, 2.108245849609380, 3.62261962890625, 4.3847503662109400,
	}

	got := TR(TestBars)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestATR(t *testing.T) {
	period := 5
	// want := []float64{0.0,0.0,0.0,0.0,2.3018,2.4814,2.4771,2.1997,2.1017,1.8974,1.9449,1.9839,1.8951,1.8301,2.0101,2.2460,2.3708,2.6776,2.7417,2.6573,2.8918,3.0995,3.0616,3.2252,3.5242,3.7493,3.3034,3.2017,2.9449,2.7819,2.9575,3.2520}

	want := []float64{0.0,0.0,0.0,0.0,2.2881851196289100,2.4640106201171900,2.45818359375,2.182321411132810,2.0843672607421900,1.8812877539062500,1.9276681425781200,1.965761223046880,1.8774643251171900,1.8127655274765600,1.9906329542078100,2.2239852452021900,2.3473217410836200,2.650882905562210,2.7141389416372700,2.6305732382707500,2.86263424979629,3.068079811946410,3.0305197577602500,3.1924883159738300,3.488347342232190,3.7111185476138700,3.2697890031301600,3.1691240491838200,2.9149196006751800,2.7535848504620200,2.9273918061508600,3.218863518162880}


	got := ATR(TestBars, period)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestATRP(t *testing.T) {
	period := 5
	// want := []float64{0.0,0.0,0.0,0.0,1.7643,1.8756,1.8488,1.6452,1.5754,1.4254,1.4430,1.4552,1.3837,1.3332,1.4361,1.5815,1.6399,1.8693,1.8894,1.8390,1.9856,2.0781,2.0619,2.2032,2.4740,2.5653,2.2719,2.1810,1.9823,1.8672,2.0151,2.2431}

	want := []float64{0.0,0.0,0.0,0.0,1.7720385915012000,1.8816642913016700,1.8536758467043500,1.6490989837941100,1.5785024568859100,1.427920243964220,1.4449946102740700,1.4567960076401800,1.3849603962991500,1.33421368245487,1.4369664930293900,1.5821285947652700,1.6404152895454700,1.8697589705462900,1.889705576633000,1.8392551510455000,1.9858416488286700,2.0782741558357700,2.0620945644915,2.2033187094311600,2.4740967752605500,2.5654610551676200,2.2720335819213800,2.181084878223090,1.9823672800300700,1.8672426404315600,2.015129412974700,2.2431271619134600}

	got := ATRP(TestBars, period)

	_, err := sliceAlmostEqual(got, want,ACC)
	if err != nil {
		t.Fatal(err)
	}
}

// func TestDiPlusMinus(t *testing.T) {
// 	period := 5

// 	dip,dim := DiPlusMinus(TestBars, period)

// 	for i, val := range dip {
// 		fmt.Println(i, val, dim[i])
// 	}

// 	want := []float64{0.0,0.0,0.0,0.0,0.0,14,27,27,25,22,32,38,42,34,52,66,64,45,47,44,40,44,35,27,20,31,28,36,35,38,28,21}
// 	_, err := sliceAlmostEqual(dip, want,ACC)
// 	if err != nil {
// 		t.Fatal(err)
// 	}

// 	want = []float64{0.0,0.0,0.0,0.0,0.0,18,14,12,10,10,8,6,5,5,4,3,2,17,13,11,8,6,9,14,34,26,23,19,17,14,25,37}

// 	_, err = sliceAlmostEqual(dim, want,ACC)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// }



// func TestADX(t *testing.T) {
// 	period := 2
// 	// want := []float64{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,32,37.6,44.68,51.5440,56.0352,62.0281,67.8225,73.0580,67.4464,65.3571,64.2857,64.8285,67.0628,65.4502,58.7602,52.2081,43.5665,36.8532,35.6825,35.5460,37.6368,31.3094,30.6475}
// 	want := []float64{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,32.6,38.08,45.064,51.85120000000000,56.28096000000000,62.224768,67.9798144,73.18385152000000,67.547081216,65.4376649728,64.35013197824,64.880105582592,67.1040844660736,65.48326757285890,58.7866140582871,52.22929124662970,43.583432997303700,36.866746397843000,35.6933971182744,35.55471769461950,37.64377415569560,31.315019324556500,30.652015459645200}

// 	got := ADX(TestBars, period)

// 	for i := 0; i < len(got); i++ {
// 		fmt.Println(i, got[i], want[i])
// 	}

// 	_, err := sliceAlmostEqual(got, want,ACC)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// }

func TestCheckInputZeroPeriod(t *testing.T) {
	input := []float64{1, 2, 3}
	period := 0

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputNegativePeriod(t *testing.T) {
	input := []float64{1, 2, 3}
	period := -2

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputPeriodToLarge(t *testing.T) {
	input := []float64{1, 2, 3}
	period := 10

	err := CheckInput(input, period) 
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputUninitializedInput(t *testing.T) {
	var input []float64
	period := 0

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for uninitialized input: %v ", err)
	}
}

func TestSliceAlmostEqualUnequalLength(t *testing.T) {
	a := []float64{1,2}
	b := []float64{1,2,3}

	_, err := sliceAlmostEqual(a,b, 1e-9)
	if err == nil {
		t.Errorf("Want error for unequal length: %v ", err)
	}
}


func TestSliceAlmostEqualNotEqual(t *testing.T) {
	a := []float64{1,2,4}
	b := []float64{1,2,3}

	_, err := sliceAlmostEqual(a,b, 1e-9)
	if err == nil {
		t.Errorf("Want error for not equal: %v ", err)
	}
}

func TestSliceAlmostEqualIsEqual(t *testing.T) {
	a := []float64{1,2,3}
	b := []float64{1,2,3}

	_, err := sliceAlmostEqual(a,b, 1e-9)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
}